--- a/drivers/net/phy/mdio_bus.c
+++ b/drivers/net/phy/mdio_bus.c
@@ -80,6 +80,8 @@ bool mdiobus_is_registered_device(struct
 }
 EXPORT_SYMBOL(mdiobus_is_registered_device);
 
+#include "mdio-boardinfo.h"
+
 /**
  * mdiobus_alloc_size - allocate a mii_bus structure
  * @size: extra amount of memory to allocate for private storage.
@@ -401,6 +403,17 @@ void mdiobus_free(struct mii_bus *bus)
 }
 EXPORT_SYMBOL(mdiobus_free);
 
+static void mdiobus_setup_phydev_from_boardinfo(struct mii_bus *bus,
+						struct phy_device *phydev,
+						struct mdio_board_info *bi)
+{
+	if (strcmp(bus->id, bi->bus_id) ||
+	    bi->phy_addr != phydev->mdio.addr)
+	    return;
+
+	phydev->mdio.dev.platform_data = (void *) bi->platform_data;
+}
+
 /**
  * mdiobus_scan - scan a bus for MDIO devices.
  * @bus: mii_bus to scan
@@ -416,6 +429,7 @@ EXPORT_SYMBOL(mdiobus_free);
 struct phy_device *mdiobus_scan(struct mii_bus *bus, int addr)
 {
 	struct phy_device *phydev;
+	struct mdio_board_entry *be;
 	int err;
 
 	phydev = get_phy_device(bus, addr, false);
@@ -428,6 +442,12 @@ struct phy_device *mdiobus_scan(struct m
 	 */
 	of_mdiobus_link_mdiodev(bus, &phydev->mdio);
 
+	mutex_lock(&__mdio_board_lock);
+	list_for_each_entry(be, &__mdio_board_list, list)
+		mdiobus_setup_phydev_from_boardinfo(bus, phydev,
+						    &be->board_info);
+	mutex_unlock(&__mdio_board_lock);
+
 	err = phy_device_register(phydev);
 	if (err) {
 		phy_device_free(phydev);
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -856,6 +856,23 @@ void mdio_bus_exit(void);
 
 extern struct bus_type mdio_bus_type;
 
+struct mdio_board_info {
+	const char	*bus_id;
+	int		phy_addr;
+
+	const void	*platform_data;
+};
+
+#ifdef CONFIG_MDIO_BOARDINFO
+int mdiobus_register_board_info(const struct mdio_board_info *info, unsigned n);
+#else
+static inline int
+mdiobus_register_board_info(const struct mdio_board_info *info, unsigned n)
+{
+	return 0;
+}
+#endif
+
 /**
  * module_phy_driver() - Helper macro for registering PHY drivers
  * @__phy_drivers: array of PHY drivers to register
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -149,6 +149,10 @@ config MDIO_XGENE
 
 comment "Switch configuration API + drivers"
 
+config MDIO_BOARDINFO
+	bool
+	default y
+
 config SWCONFIG
 	tristate "Switch configuration API"
 	---help---
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -3,6 +3,8 @@
 libphy-y			:= phy.o phy_device.o mdio_bus.o mdio_device.o
 libphy-$(CONFIG_SWPHY)		+= swphy.o
 
+obj-$(CONFIG_MDIO_BOARDINFO)	+= mdio-boardinfo.o
+
 obj-$(CONFIG_PHYLIB)		+= libphy.o
 
 obj-$(CONFIG_SWCONFIG)		+= swconfig.o
--- /dev/null
+++ b/drivers/net/phy/mdio-boardinfo.h
@@ -17,5 +17,11 @@
 };
 
 void mdiobus_setup_mdiodev_from_board_info(struct mii_bus *bus);
+ 
+/* __mdio_board_lock protects __mdio_board_list
+ * only mdio_bus components are allowed to use these symbols.
+ */
+extern struct mutex __mdio_board_lock;
+extern struct list_head __mdio_board_list;
 
 #endif /* __MDIO_BOARD_INFO_H */
--- a/drivers/net/Makefile
+++ b/drivers/net/Makefile
@@ -17,7 +17,7 @@ obj-$(CONFIG_MII) += mii.o
 obj-$(CONFIG_MDIO) += mdio.o
 obj-$(CONFIG_NET) += Space.o loopback.o
 obj-$(CONFIG_NETCONSOLE) += netconsole.o
-obj-$(CONFIG_PHYLIB) += phy/
+obj-y += phy/
 obj-$(CONFIG_RIONET) += rionet.o
 obj-$(CONFIG_NET_TEAM) += team/
 obj-$(CONFIG_TUN) += tun.o
