Index: /src/linux/universal/linux-4.9/include/net/netfilter/nf_conntrack_ecache.h
===================================================================
--- /src/linux/universal/linux-4.9/include/net/netfilter/nf_conntrack_ecache.h	(revision 32626)
+++ /src/linux/universal/linux-4.9/include/net/netfilter/nf_conntrack_ecache.h	(revision 32627)
@@ -94,9 +94,4 @@
 			  u32 portid, int report)
 {
-	const struct net *net = nf_ct_net(ct);
-
-	if (!rcu_access_pointer(net->ct.nf_conntrack_event_cb))
-		return 0;
-
 	return nf_conntrack_eventmask_report(1 << event, ct, portid, report);
 }
@@ -105,9 +100,4 @@
 nf_conntrack_event(enum ip_conntrack_events event, struct nf_conn *ct)
 {
-	const struct net *net = nf_ct_net(ct);
-
-	if (!rcu_access_pointer(net->ct.nf_conntrack_event_cb))
-		return 0;
-
 	return nf_conntrack_eventmask_report(1 << event, ct, 0, 0);
 }
Index: /net/fast-classifier/fast-classifier.c
===================================================================
--- /net/fast-classifier/fast-classifier.c	(revision 32626)
+++ /net/fast-classifier/fast-classifier.c	(revision 32627)
@@ -1384,5 +1384,5 @@
 	if (!test_bit(IPS_FIXED_TIMEOUT_BIT, &ct->status)) {
 		spin_lock_bh(&ct->lock);
-		ct->timeout.expires += sis->delta_jiffies;
+		ct->timeout += sis->delta_jiffies;
 		spin_unlock_bh(&ct->lock);
 	}
Index: /net/shortcut-fe/sfe_cm.c
===================================================================
--- /net/shortcut-fe/sfe_cm.c	(revision 32626)
+++ /net/shortcut-fe/sfe_cm.c	(revision 32627)
@@ -810,5 +810,5 @@
 	if (!test_bit(IPS_FIXED_TIMEOUT_BIT, &ct->status)) {
 		spin_lock_bh(&ct->lock);
-		ct->timeout.expires += sis->delta_jiffies;
+		ct->timeout += sis->delta_jiffies;
 		spin_unlock_bh(&ct->lock);
 	}
@@ -884,7 +884,7 @@ static void sfe_cm_sync_rule(struct sfe_connection_sync *sis)
 				timeouts = nf_ct_timeout_lookup(&init_net, ct, l4proto);
 
 				spin_lock_bh(&ct->lock);
-				ct->timeout.expires = jiffies + timeouts[UDP_CT_REPLIED];
+				ct->timeout = jiffies + timeouts[UDP_CT_REPLIED];
 				spin_unlock_bh(&ct->lock);
 			}
 		}
   
